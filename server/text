{ [Function: model]
  hooks:
   Kareem {
     _pres: Map { 'save' => [Array], 'remove' => [Array] },
     _posts: Map { 'save' => [Array], 'init' => [Array] } },
  base:
   Mongoose {
     connections: [ [Object] ],
     models: { book: [Circular], bookings: [Object] },
     modelSchemas: { book: [Object], bookings: [Object] },
     options: { pluralization: true },
     _pluralize: [Function: pluralize],
     Schema: { [Function: Schema] reserved: [Object], Types: [Object], ObjectId: [Object] },
     model: [Function],
     plugins: [ [Array], [Array], [Array], [Array] ] },
  modelName: 'book',
  model: [Function: model],
  db:
   NativeConnection {
     base:
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        Schema: [Object],
        model: [Function],
        plugins: [Array] },
     collections: { books: [Object], bookings: [Object] },
     models: { book: [Circular], bookings: [Object] },
     config: { autoIndex: true },
     replica: false,
     options: null,
     otherDbs: [],
     relatedDbs: {},
     states:
      { '0': 'disconnected',
        '1': 'connected',
        '2': 'connecting',
        '3': 'disconnecting',
        '99': 'uninitialized',
        disconnected: 0,
        connected: 1,
        connecting: 2,
        disconnecting: 3,
        uninitialized: 99 },
     _readyState: 1,
     _closeCalled: false,
     _hasOpened: true,
     '$internalEmitter':
      EventEmitter {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: 0 },
     _listening: false,
     _connectionOptions: { useNewUrlParser: true, promiseLibrary: [Function: Promise] },
     client:
      MongoClient {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        s: [Object],
        topology: [Object] },
     '$initialConnection': Promise { [Circular] },
     name: 'admin',
     host: 'cluster0-shard-00-02-a44vp.mongodb.net',
     port: 27017,
     user: 'novenix',
     pass: 'Clave123',
     db:
      Db {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        s: [Object],
        serverConfig: [Getter],
        bufferMaxEntries: [Getter],
        databaseName: [Getter] } },
  discriminators: undefined,
  events:
   EventEmitter {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined },
  '$appliedMethods': true,
  '$appliedHooks': true,
  _middleware:
   Kareem {
     _pres: Map { 'save' => [Array], 'remove' => [Array] },
     _posts: Map { 'save' => [Array], 'init' => [Array] } },
  schema:
   Schema {
     obj:
      { title: [Function: String],
        author: [Function: String],
        pages: [Function: Number],
        price: [Function: Number] },
     paths:
      { title: [Object],
        author: [Object],
        pages: [Object],
        price: [Object],
        _id: [Object],
        __v: [Object] },
     aliases: {},
     subpaths: {},
     virtuals: { id: [Object] },
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     methodOptions: {},
     statics: {},
     tree:
      { title: [Function: String],
        author: [Function: String],
        pages: [Function: Number],
        price: [Function: Number],
        _id: [Object],
        __v: [Function: Number],
        id: [Object] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     '$id': 1,
     s: { hooks: [Object] },
     _userProvidedOptions: {},
     options:
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     [Symbol(Mongoose.helpers.setParentPointers)]: true },
  collection:
   NativeCollection {
     collection: Collection { s: [Object] },
     opts:
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'books',
     collectionName: 'books',
     conn:
      NativeConnection {
        base: [Object],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        '$internalEmitter': [Object],
        _listening: false,
        _connectionOptions: [Object],
        client: [Object],
        '$initialConnection': [Object],
        name: 'admin',
        host: 'cluster0-shard-00-02-a44vp.mongodb.net',
        port: 27017,
        user: 'novenix',
        pass: 'Clave123',
        db: [Object] },
     queue: [],
     buffer: false,
     emitter:
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  Query:
   { [Function]
     base:
      Query {
        toConstructor: [Function: toConstructor],
        setOptions: [Function],
        collection: [Function: collection],
        collation: [Function],
        '$where': [Function],
        where: [Function],
        equals: [Function: equals],
        eq: [Function: eq],
        or: [Function: or],
        nor: [Function: nor],
        and: [Function: and],
        gt: [Function],
        gte: [Function],
        lt: [Function],
        lte: [Function],
        ne: [Function],
        in: [Function],
        nin: [Function],
        all: [Function],
        regex: [Function],
        size: [Function],
        maxDistance: [Function],
        minDistance: [Function],
        mod: [Function],
        exists: [Function],
        elemMatch: [Function],
        within: [Function: within],
        box: [Function],
        polygon: [Function],
        circle: [Function],
        near: [Function: near],
        intersects: [Function: intersects],
        geometry: [Function: geometry],
        select: [Function: select],
        slice: [Function],
        sort: [Function],
        limit: [Function],
        skip: [Function],
        maxScan: [Function],
        batchSize: [Function],
        comment: [Function],
        maxTimeMS: [Function],
        maxTime: [Function],
        snapshot: [Function],
        hint: [Function],
        j: [Function: j],
        slaveOk: [Function],
        setReadPreference: [Function],
        read: [Function],
        r: [Function],
        readConcern: [Function],
        tailable: [Function],
        w: [Function: writeConcern],
        writeConcern: [Function: writeConcern],
        wTimeout: [Function: wtimeout],
        wtimeout: [Function: wtimeout],
        merge: [Function],
        find: [Function],
        cursor: [Function: cursor],
        findOne: [Function],
        count: [Function],
        distinct: [Function],
        update: [Function: update],
        updateMany: [Function: updateMany],
        updateOne: [Function: updateOne],
        replaceOne: [Function: replaceOne],
        remove: [Function],
        deleteOne: [Function],
        deleteMany: [Function],
        findOneAndUpdate: [Function],
        findOneAndDelete: [Function],
        findOneAndRemove: [Function],
        _findAndModify: [Function],
        _wrapCallback: [Function],
        setTraceFunction: [Function],
        exec: [Function: exec],
        thunk: [Function],
        then: [Function],
        stream: [Function],
        selected: [Function: selected],
        selectedInclusively: [Function: selectedInclusively],
        selectedExclusively: [Function: selectedExclusively],
        _mergeUpdate: [Function],
        _optionsForExec: [Function],
        _fieldsForExec: [Function],
        _updateForExec: [Function],
        _ensurePath: [Function],
        _validate: [Function] } },
  '$__insertMany': [Function],
  '$init': Promise { [Circular] },
  '$caught': true,
  [Symbol(mongoose#Model)]: true }
  _____________________________________________________________________________________________________________
  { [Function: model]
  hooks:
   Kareem {
     _pres: Map { 'save' => [Array], 'remove' => [Array] },
     _posts: Map { 'save' => [Array], 'init' => [Array] } },
  base:
   Mongoose {
     connections: [ [Object] ],
     models: { bookings: [Circular] },
     modelSchemas: { bookings: [Object] },
     options: { pluralization: true },
     _pluralize: [Function: pluralize],
     Schema: { [Function: Schema] reserved: [Object], Types: [Object], ObjectId: [Object] },
     model: [Function],
     plugins: [ [Array], [Array], [Array], [Array] ] },
  modelName: 'bookings',
  model: [Function: model],
  db:
   NativeConnection {
     base:
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        Schema: [Object],
        model: [Function],
        plugins: [Array] },
     collections: { bookings: [Object] },
     models: { bookings: [Circular] },
     config: { autoIndex: true },
     replica: false,
     options: null,
     otherDbs: [],
     relatedDbs: {},
     states:
      { '0': 'disconnected',
        '1': 'connected',
        '2': 'connecting',
        '3': 'disconnecting',
        '99': 'uninitialized',
        disconnected: 0,
        connected: 1,
        connecting: 2,
        disconnecting: 3,
        uninitialized: 99 },
     _readyState: 1,
     _closeCalled: false,
     _hasOpened: true,
     '$internalEmitter':
      EventEmitter {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: 0 },
     _listening: false,
     _connectionOptions: { useNewUrlParser: true, promiseLibrary: [Function: Promise] },
     client:
      MongoClient {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        s: [Object],
        topology: [Object] },
     '$initialConnection': Promise { [Circular] },
     name: 'admin',
     host: 'cluster0-shard-00-00-1k7me.mongodb.net',
     port: 27017,
     user: 'Nicolas',
     pass: 'Mari123',
     db:
      Db {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        s: [Object],
        serverConfig: [Getter],
        bufferMaxEntries: [Getter],
        databaseName: [Getter] } },
  discriminators: undefined,
  events:
   EventEmitter {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined },
  '$appliedMethods': true,
  '$appliedHooks': true,
  _middleware:
   Kareem {
     _pres: Map { 'save' => [Array], 'remove' => [Array] },
     _posts: Map { 'save' => [Array], 'init' => [Array] } },
  schema:
   Schema {
     obj:
      { username: [Function: String],
        pickUp: [Function: String],
        dropOff: [Function: String] },
     paths:
      { username: [Object],
        pickUp: [Object],
        dropOff: [Object],
        _id: [Object],
        __v: [Object] },
     aliases: {},
     subpaths: {},
     virtuals: { id: [Object] },
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     methodOptions: {},
     statics: {},
     tree:
      { username: [Function: String],
        pickUp: [Function: String],
        dropOff: [Function: String],
        _id: [Object],
        __v: [Function: Number],
        id: [Object] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     '$id': 1,
     s: { hooks: [Object] },
     _userProvidedOptions: {},
     options:
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     [Symbol(Mongoose.helpers.setParentPointers)]: true },
  collection:
   NativeCollection {
     collection: Collection { s: [Object] },
     opts:
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'bookings',
     collectionName: 'bookings',
     conn:
      NativeConnection {
        base: [Object],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        '$internalEmitter': [Object],
        _listening: false,
        _connectionOptions: [Object],
        client: [Object],
        '$initialConnection': [Object],
        name: 'admin',
        host: 'cluster0-shard-00-00-1k7me.mongodb.net',
        port: 27017,
        user: 'Nicolas',
        pass: 'Mari123',
        db: [Object] },
     queue: [],
     buffer: false,
     emitter:
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  Query:
   { [Function]
     base:
      Query {
        toConstructor: [Function: toConstructor],
        setOptions: [Function],
        collection: [Function: collection],
        collation: [Function],
        '$where': [Function],
        where: [Function],
        equals: [Function: equals],
        eq: [Function: eq],
        or: [Function: or],
        nor: [Function: nor],
        and: [Function: and],
        gt: [Function],
        gte: [Function],
        lt: [Function],
        lte: [Function],
        ne: [Function],
        in: [Function],
        nin: [Function],
        all: [Function],
        regex: [Function],
        size: [Function],
        maxDistance: [Function],
        minDistance: [Function],
        mod: [Function],
        exists: [Function],
        elemMatch: [Function],
        within: [Function: within],
        box: [Function],
        polygon: [Function],
        circle: [Function],
        near: [Function: near],
        intersects: [Function: intersects],
        geometry: [Function: geometry],
        select: [Function: select],
        slice: [Function],
        sort: [Function],
        limit: [Function],
        skip: [Function],
        maxScan: [Function],
        batchSize: [Function],
        comment: [Function],
        maxTimeMS: [Function],
        maxTime: [Function],
        snapshot: [Function],
        hint: [Function],
        j: [Function: j],
        slaveOk: [Function],
        setReadPreference: [Function],
        read: [Function],
        r: [Function],
        readConcern: [Function],
        tailable: [Function],
        w: [Function: writeConcern],
        writeConcern: [Function: writeConcern],
        wTimeout: [Function: wtimeout],
        wtimeout: [Function: wtimeout],
        merge: [Function],
        find: [Function],
        cursor: [Function: cursor],
        findOne: [Function],
        count: [Function],
        distinct: [Function],
        update: [Function: update],
        updateMany: [Function: updateMany],
        updateOne: [Function: updateOne],
        replaceOne: [Function: replaceOne],
        remove: [Function],
        deleteOne: [Function],
        deleteMany: [Function],
        findOneAndUpdate: [Function],
        findOneAndDelete: [Function],
        findOneAndRemove: [Function],
        _findAndModify: [Function],
        _wrapCallback: [Function],
        setTraceFunction: [Function],
        exec: [Function: exec],
        thunk: [Function],
        then: [Function],
        stream: [Function],
        selected: [Function: selected],
        selectedInclusively: [Function: selectedInclusively],
        selectedExclusively: [Function: selectedExclusively],
        _mergeUpdate: [Function],
        _optionsForExec: [Function],
        _fieldsForExec: [Function],
        _updateForExec: [Function],
        _ensurePath: [Function],
        _validate: [Function] } },
  '$__insertMany': [Function],
  '$init': Promise { [Circular] },
  '$caught': true,
  [Symbol(mongoose#Model)]: true }
  ---------------------------------------------------------------------------------------------------
  { [Function: model]
  hooks:
   Kareem {
     _pres: Map { 'save' => [Array], 'remove' => [Array] },
     _posts: Map { 'save' => [Array], 'init' => [Array] } },
  base:
   Mongoose {
     connections: [ [Object] ],
     models: { bookings: [Circular] },
     modelSchemas: { bookings: [Object] },
     options: { pluralization: true },
     _pluralize: [Function: pluralize],
     Schema: { [Function: Schema] reserved: [Object], Types: [Object], ObjectId: [Object] },
     model: [Function],
     plugins: [ [Array], [Array], [Array], [Array] ] },
  modelName: 'bookings',
  model: [Function: model],
  db:
   NativeConnection {
     base:
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        Schema: [Object],
        model: [Function],
        plugins: [Array] },
     collections: { bookings: [Object] },
     models: { bookings: [Circular] },
     config: { autoIndex: true },
     replica: false,
     options: null,
     otherDbs: [],
     relatedDbs: {},
     states:
      { '0': 'disconnected',
        '1': 'connected',
        '2': 'connecting',
        '3': 'disconnecting',
        '99': 'uninitialized',
        disconnected: 0,
        connected: 1,
        connecting: 2,
        disconnecting: 3,
        uninitialized: 99 },
     _readyState: 1,
     _closeCalled: false,
     _hasOpened: true,
     '$internalEmitter':
      EventEmitter {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: 0 },
     _listening: false,
     _connectionOptions: { useNewUrlParser: true, promiseLibrary: [Function: Promise] },
     client:
      MongoClient {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        s: [Object],
        topology: [Object] },
     '$initialConnection': Promise { [Circular] },
     name: 'admin',
     host: 'cluster0-shard-00-02-1k7me.mongodb.net',
     port: 27017,
     user: 'Nicolas',
     pass: 'Mari123',
     db:
      Db {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        s: [Object],
        serverConfig: [Getter],
        bufferMaxEntries: [Getter],
        databaseName: [Getter] } },
  discriminators: undefined,
  events:
   EventEmitter {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined },
  '$appliedMethods': true,
  '$appliedHooks': true,
  _middleware:
   Kareem {
     _pres: Map { 'save' => [Array], 'remove' => [Array] },
     _posts: Map { 'save' => [Array], 'init' => [Array] } },
  schema:
   Schema {
     obj:
      { username: [Function: String],
        pickUp: [Function: String],
        dropOff: [Function: String] },
     paths:
      { username: [Object],
        pickUp: [Object],
        dropOff: [Object],
        _id: [Object],
        __v: [Object] },
     aliases: {},
     subpaths: {},
     virtuals: { id: [Object] },
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     methodOptions: {},
     statics: {},
     tree:
      { username: [Function: String],
        pickUp: [Function: String],
        dropOff: [Function: String],
        _id: [Object],
        __v: [Function: Number],
        id: [Object] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     '$id': 1,
     s: { hooks: [Object] },
     _userProvidedOptions: {},
     options:
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     [Symbol(Mongoose.helpers.setParentPointers)]: true },
  collection:
   NativeCollection {
     collection: Collection { s: [Object] },
     opts:
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'bookings',
     collectionName: 'bookings',
     conn:
      NativeConnection {
        base: [Object],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        '$internalEmitter': [Object],
        _listening: false,
        _connectionOptions: [Object],
        client: [Object],
        '$initialConnection': [Object],
        name: 'admin',
        host: 'cluster0-shard-00-02-1k7me.mongodb.net',
        port: 27017,
        user: 'Nicolas',
        pass: 'Mari123',
        db: [Object] },
     queue: [],
     buffer: false,
     emitter:
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  Query:
   { [Function]
     base:
      Query {
        toConstructor: [Function: toConstructor],
        setOptions: [Function],
        collection: [Function: collection],
        collation: [Function],
        '$where': [Function],
        where: [Function],
        equals: [Function: equals],
        eq: [Function: eq],
        or: [Function: or],
        nor: [Function: nor],
        and: [Function: and],
        gt: [Function],
        gte: [Function],
        lt: [Function],
        lte: [Function],
        ne: [Function],
        in: [Function],
        nin: [Function],
        all: [Function],
        regex: [Function],
        size: [Function],
        maxDistance: [Function],
        minDistance: [Function],
        mod: [Function],
        exists: [Function],
        elemMatch: [Function],
        within: [Function: within],
        box: [Function],
        polygon: [Function],
        circle: [Function],
        near: [Function: near],
        intersects: [Function: intersects],
        geometry: [Function: geometry],
        select: [Function: select],
        slice: [Function],
        sort: [Function],
        limit: [Function],
        skip: [Function],
        maxScan: [Function],
        batchSize: [Function],
        comment: [Function],
        maxTimeMS: [Function],
        maxTime: [Function],
        snapshot: [Function],
        hint: [Function],
        j: [Function: j],
        slaveOk: [Function],
        setReadPreference: [Function],
        read: [Function],
        r: [Function],
        readConcern: [Function],
        tailable: [Function],
        w: [Function: writeConcern],
        writeConcern: [Function: writeConcern],
        wTimeout: [Function: wtimeout],
        wtimeout: [Function: wtimeout],
        merge: [Function],
        find: [Function],
        cursor: [Function: cursor],
        findOne: [Function],
        count: [Function],
        distinct: [Function],
        update: [Function: update],
        updateMany: [Function: updateMany],
        updateOne: [Function: updateOne],
        replaceOne: [Function: replaceOne],
        remove: [Function],
        deleteOne: [Function],
        deleteMany: [Function],
        findOneAndUpdate: [Function],
        findOneAndDelete: [Function],
        findOneAndRemove: [Function],
        _findAndModify: [Function],
        _wrapCallback: [Function],
        setTraceFunction: [Function],
        exec: [Function: exec],
        thunk: [Function],
        then: [Function],
        stream: [Function],
        selected: [Function: selected],
        selectedInclusively: [Function: selectedInclusively],
        selectedExclusively: [Function: selectedExclusively],
        _mergeUpdate: [Function],
        _optionsForExec: [Function],
        _fieldsForExec: [Function],
        _updateForExec: [Function],
        _ensurePath: [Function],
        _validate: [Function] } },
  '$__insertMany': [Function],
  '$init': Promise { [Circular] },
  '$caught': true,
  [Symbol(mongoose#Model)]: true }
------------------------------------------------------------------------------------------------------
{ [Function: model]
  hooks:
   Kareem {
     _pres: Map { 'save' => [Array], 'remove' => [Array] },
     _posts: Map { 'save' => [Array], 'init' => [Array] } },
  base:
   Mongoose {
     connections: [ [Object] ],
     models: { book: [Circular] },
     modelSchemas: { book: [Object] },
     options: { pluralization: true },
     _pluralize: [Function: pluralize],
     Schema: { [Function: Schema] reserved: [Object], Types: [Object], ObjectId: [Object] },
     model: [Function],
     plugins: [ [Array], [Array], [Array], [Array] ] },
  modelName: 'book',
  model: [Function: model],
  db:
   NativeConnection {
     base:
      Mongoose {
        connections: [Array],
        models: [Object],
        modelSchemas: [Object],
        options: [Object],
        _pluralize: [Function: pluralize],
        Schema: [Object],
        model: [Function],
        plugins: [Array] },
     collections: { books: [Object] },
     models: { book: [Circular] },
     config: { autoIndex: true },
     replica: false,
     options: null,
     otherDbs: [],
     relatedDbs: {},
     states:
      { '0': 'disconnected',
        '1': 'connected',
        '2': 'connecting',
        '3': 'disconnecting',
        '99': 'uninitialized',
        disconnected: 0,
        connected: 1,
        connecting: 2,
        disconnecting: 3,
        uninitialized: 99 },
     _readyState: 1,
     _closeCalled: false,
     _hasOpened: true,
     '$internalEmitter':
      EventEmitter {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: 0 },
     _listening: false,
     _connectionOptions: { useNewUrlParser: true, promiseLibrary: [Function: Promise] },
     client:
      MongoClient {
        domain: null,
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        s: [Object],
        topology: [Object] },
     '$initialConnection': Promise { [Circular] },
     name: 'admin',
     host: 'cluster0-shard-00-00-a44vp.mongodb.net',
     port: 27017,
     user: 'novenix',
     pass: 'Clave123',
     db:
      Db {
        domain: null,
        _events: [Object],
        _eventsCount: 3,
        _maxListeners: undefined,
        s: [Object],
        serverConfig: [Getter],
        bufferMaxEntries: [Getter],
        databaseName: [Getter] } },
  discriminators: undefined,
  events:
   EventEmitter {
     domain: null,
     _events: {},
     _eventsCount: 0,
     _maxListeners: undefined },
  '$appliedMethods': true,
  '$appliedHooks': true,
  _middleware:
   Kareem {
     _pres: Map { 'save' => [Array], 'remove' => [Array] },
     _posts: Map { 'save' => [Array], 'init' => [Array] } },
  schema:
   Schema {
     obj:
      { title: [Function: String],
        author: [Function: String],
        pages: [Function: Number],
        price: [Function: Number] },
     paths:
      { title: [Object],
        author: [Object],
        pages: [Object],
        price: [Object],
        _id: [Object],
        __v: [Object] },
     aliases: {},
     subpaths: {},
     virtuals: { id: [Object] },
     singleNestedPaths: {},
     nested: {},
     inherits: {},
     callQueue: [],
     _indexes: [],
     methods: {},
     methodOptions: {},
     statics: {},
     tree:
      { title: [Function: String],
        author: [Function: String],
        pages: [Function: Number],
        price: [Function: Number],
        _id: [Object],
        __v: [Function: Number],
        id: [Object] },
     query: {},
     childSchemas: [],
     plugins: [ [Object], [Object], [Object], [Object], [Object] ],
     '$id': 1,
     s: { hooks: [Object] },
     _userProvidedOptions: {},
     options:
      { typeKey: 'type',
        id: true,
        noVirtualId: false,
        _id: true,
        noId: false,
        validateBeforeSave: true,
        read: null,
        shardKey: null,
        autoIndex: null,
        minimize: true,
        discriminatorKey: '__t',
        versionKey: '__v',
        capped: false,
        bufferCommands: true,
        strict: true,
        pluralization: true },
     '$globalPluginsApplied': true,
     [Symbol(Mongoose.helpers.setParentPointers)]: true },
  collection:
   NativeCollection {
     collection: Collection { s: [Object] },
     opts:
      { bufferCommands: true,
        capped: false,
        '$wasForceClosed': undefined },
     name: 'books',
     collectionName: 'books',
     conn:
      NativeConnection {
        base: [Object],
        collections: [Object],
        models: [Object],
        config: [Object],
        replica: false,
        options: null,
        otherDbs: [],
        relatedDbs: {},
        states: [Object],
        _readyState: 1,
        _closeCalled: false,
        _hasOpened: true,
        '$internalEmitter': [Object],
        _listening: false,
        _connectionOptions: [Object],
        client: [Object],
        '$initialConnection': [Object],
        name: 'admin',
        host: 'cluster0-shard-00-00-a44vp.mongodb.net',
        port: 27017,
        user: 'novenix',
        pass: 'Clave123',
        db: [Object] },
     queue: [],
     buffer: false,
     emitter:
      EventEmitter {
        domain: null,
        _events: {},
        _eventsCount: 0,
        _maxListeners: undefined } },
  Query:
   { [Function]
     base:
      Query {
        toConstructor: [Function: toConstructor],
        setOptions: [Function],
        collection: [Function: collection],
        collation: [Function],
        '$where': [Function],
        where: [Function],
        equals: [Function: equals],
        eq: [Function: eq],
        or: [Function: or],
        nor: [Function: nor],
        and: [Function: and],
        gt: [Function],
        gte: [Function],
        lt: [Function],
        lte: [Function],
        ne: [Function],
        in: [Function],
        nin: [Function],
        all: [Function],
        regex: [Function],
        size: [Function],
        maxDistance: [Function],
        minDistance: [Function],
        mod: [Function],
        exists: [Function],
        elemMatch: [Function],
        within: [Function: within],
        box: [Function],
        polygon: [Function],
        circle: [Function],
        near: [Function: near],
        intersects: [Function: intersects],
        geometry: [Function: geometry],
        select: [Function: select],
        slice: [Function],
        sort: [Function],
        limit: [Function],
        skip: [Function],
        maxScan: [Function],
        batchSize: [Function],
        comment: [Function],
        maxTimeMS: [Function],
        maxTime: [Function],
        snapshot: [Function],
        hint: [Function],
        j: [Function: j],
        slaveOk: [Function],
        setReadPreference: [Function],
        read: [Function],
        r: [Function],
        readConcern: [Function],
        tailable: [Function],
        w: [Function: writeConcern],
        writeConcern: [Function: writeConcern],
        wTimeout: [Function: wtimeout],
        wtimeout: [Function: wtimeout],
        merge: [Function],
        find: [Function],
        cursor: [Function: cursor],
        findOne: [Function],
        count: [Function],
        distinct: [Function],
        update: [Function: update],
        updateMany: [Function: updateMany],
        updateOne: [Function: updateOne],
        replaceOne: [Function: replaceOne],
        remove: [Function],
        deleteOne: [Function],
        deleteMany: [Function],
        findOneAndUpdate: [Function],
        findOneAndDelete: [Function],
        findOneAndRemove: [Function],
        _findAndModify: [Function],
        _wrapCallback: [Function],
        setTraceFunction: [Function],
        exec: [Function: exec],
        thunk: [Function],
        then: [Function],
        stream: [Function],
        selected: [Function: selected],
        selectedInclusively: [Function: selectedInclusively],
        selectedExclusively: [Function: selectedExclusively],
        _mergeUpdate: [Function],
        _optionsForExec: [Function],
        _fieldsForExec: [Function],
        _updateForExec: [Function],
        _ensurePath: [Function],
        _validate: [Function] } },
  '$__insertMany': [Function],
  '$init': Promise { [Circular] },
  '$caught': true,
  [Symbol(mongoose#Model)]: true }